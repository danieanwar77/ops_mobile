/// response_no : 0
/// file : ""
/// md5_file : "f4283dc804127640096946a0827a9e1f"

class ResponseGendataFile {
  ResponseGendataFile({
      num? responseNo,
      String? file,
      String? md5File,}){
    _responseNo = responseNo;
    _file = file;
    _md5File = md5File;
}

  ResponseGendataFile.fromJson(dynamic json) {
    _responseNo = json['response_no'];
    _file = json['file'];
    _md5File = json['md5_file'];
  }
  num? _responseNo;
  String? _file;
  String? _md5File;
ResponseGendataFile copyWith({  num? responseNo,
  String? file,
  String? md5File,
}) => ResponseGendataFile(  responseNo: responseNo ?? _responseNo,
  file: file ?? _file,
  md5File: md5File ?? _md5File,
);
  num? get responseNo => _responseNo;
  String? get file => _file;
  String? get md5File => _md5File;

  Map<String, dynamic> toJson() {
    final map = <String, dynamic>{};
    map['response_no'] = _responseNo;
    map['file'] = _file;
    map['md5_file'] = _md5File;
    return map;
  }

}